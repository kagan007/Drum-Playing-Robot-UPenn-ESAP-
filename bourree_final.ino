#define rightMotorForward 18
#define rightMotorReverse 19
#define leftMotorForward 4
#define leftMotorReverse 5
#include <WiFi.h>
#include <WiFiUdp.h>
WiFiUDP UDPTestServer;


int startNote[370] = {33875000, 34000000, 34500000, 34875000, 35000000, 35500000, 35875000, 36000000, 36500000, 37000000, 37375000, 37500000, 37875000, 38000000, 38500000, 38875000, 39000000, 39500000, 39875000, 40000000, 40500000, 41000000, 41375000, 41500000, 41875000, 42000000, 42500000, 42875000, 43000000, 43500000, 43875000, 44000000, 44500000, 45000000, 45375000, 45500000, 45875000, 46000000, 46500000, 46875000, 47000000, 47500000, 47875000, 48000000, 48500000, 48875000, 49000000, 49375000, 49500000, 49875000, 50000000, 50125000, 50500000, 50875000, 51000000, 51375000, 51500000, 51875000, 52000000, 52125000, 52500000, 52875000, 53000000, 53375000, 53500000, 53875000, 54000000, 54500000, 54875000, 55000000, 55500000, 55875000, 56000000, 56500000, 57000000, 57375000, 57500000, 57875000, 58000000, 58500000, 58875000, 59000000, 59375000, 59500000, 59875000, 60000000, 60500000, 61000000, 61375000, 61500000, 61875000, 62000000, 62500000, 62875000, 63000000, 63500000, 63875000, 64000000, 64500000, 65000000, 65375000, 65500000, 65875000, 66000000, 70000000, 74000000, 74250000, 74500000, 74625000, 78000000, 78250000, 78500000, 78625000, 82000000, 82250000, 82500000, 82750000, 82875000, 83000000, 83250000, 83500000, 83750000, 83875000, 84000000, 84250000, 84500000, 84750000, 84875000, 85000000, 85250000, 85500000, 85625000, 85750000, 86000000, 86250000, 86375000, 86500000, 86750000, 87000000, 87250000, 87500000, 87625000, 87750000, 88000000, 88250000, 88375000, 88500000, 88750000, 89000000, 89250000, 89500000, 89625000, 89750000, 90000000, 90125000, 90375000, 90500000, 90750000, 91000000, 91125000, 91500000, 91625000, 91750000, 92000000, 92125000, 92500000, 92750000, 93000000, 93125000, 93500000, 93625000, 93750000, 94000000, 94250000, 94375000, 94500000, 94750000, 95000000, 95250000, 95500000, 95625000, 95750000, 96000000, 96250000, 96375000, 96500000, 96750000, 97000000, 97250000, 97500000, 97625000, 97750000, 98000000, 98250000, 98500000, 98750000, 98875000, 99000000, 99250000, 99500000, 99750000, 99875000, 100000000, 100250000, 100500000, 100750000, 100875000, 101000000, 101250000, 101500000, 101625000, 101750000, 102000000, 102250000, 102375000, 102500000, 102750000, 103000000, 103250000, 103500000, 103625000, 103750000, 104000000, 104250000, 104375000, 104500000, 104750000, 105000000, 105250000, 105500000, 105625000, 105750000, 106000000, 106250000, 106375000, 106500000, 106750000, 107000000, 107250000, 107500000, 107625000, 107750000, 108000000, 108250000, 108500000, 108750000, 108875000, 109000000, 109250000, 109500000, 109625000, 109750000, 110000000, 110250000, 110375000, 110500000, 110750000, 110875000, 111000000, 111250000, 111500000, 111625000, 111750000, 112000000, 112250000, 112375000, 112500000, 112750000, 112875000, 113000000, 113250000, 113500000, 113625000, 113750000, 169875000, 170000000, 170500000, 170875000, 171000000, 171500000, 171875000, 172000000, 172500000, 173000000, 173375000, 173500000, 173875000, 174000000, 174500000, 174875000, 175000000, 175500000, 175875000, 176000000, 176500000, 176875000, 177000000, 177375000, 177500000, 177875000, 178000000, 178500000, 178875000, 179000000, 179500000, 179875000, 180000000, 180500000, 181000000, 181375000, 181500000, 181875000, 182000000, 182500000, 182875000, 183000000, 183500000, 183875000, 184000000, 184500000, 184875000, 185000000, 185375000, 185500000, 185875000, 186000000, 186500000, 186875000, 187000000, 187500000, 187875000, 188000000, 188500000, 188875000, 189000000, 189375000, 189500000, 189875000, 190000000, 190500000, 190875000, 191000000, 191500000, 191875000, 192000000, 192500000, 192875000, 193000000, 193375000, 193500000, 193875000, 194000000, 194500000, 194875000, 195000000, 195500000, 195875000, 196000000, 196500000, 196875000, 197000000, 197375000, 197500000, 197875000, 198000000, 198500000, 198875000, 199000000, 199500000, 199875000};
int endNote[370] = {33999000, 34499000, 34874000, 34999000, 35499000, 35874000, 35999000, 36499000, 36999000, 37374000, 37499000, 37874000, 37999000, 38499000, 38874000, 38999000, 39499000, 39874000, 39999000, 40499000, 40999000, 41374000, 41499000, 41874000, 41999000, 42499000, 42874000, 42999000, 43499000, 43874000, 43999000, 44499000, 44999000, 45374000, 45499000, 45874000, 45999000, 46499000, 46874000, 46999000, 47499000, 47874000, 47999000, 48499000, 48874000, 48999000, 49374000, 49499000, 49874000, 49999000, 50124000, 50499000, 50874000, 50999000, 51374000, 51499000, 51874000, 51999000, 52124000, 52499000, 52874000, 52999000, 53374000, 53499000, 53874000, 53999000, 54499000, 54874000, 54999000, 55499000, 55874000, 55999000, 56499000, 56999000, 57374000, 57499000, 57874000, 57999000, 58499000, 58874000, 58999000, 59374000, 59499000, 59874000, 59999000, 60499000, 60999000, 61374000, 61499000, 61874000, 61999000, 62499000, 62874000, 62999000, 63499000, 63874000, 63999000, 64499000, 64999000, 65374000, 65499000, 65874000, 65999000, 66499000, 70499000, 74249000, 74499000, 74624000, 74999000, 78249000, 78499000, 78624000, 78999000, 82249000, 82499000, 82749000, 82874000, 82999000, 83249000, 83499000, 83749000, 83874000, 83999000, 84249000, 84499000, 84749000, 84874000, 84999000, 85249000, 85499000, 85624000, 85749000, 85999000, 86249000, 86374000, 86499000, 86749000, 86999000, 87249000, 87499000, 87624000, 87749000, 87999000, 88249000, 88374000, 88499000, 88749000, 88999000, 89249000, 89499000, 89624000, 89749000, 89999000, 90124000, 90374000, 90499000, 90749000, 90999000, 91124000, 91499000, 91624000, 91749000, 91999000, 92124000, 92499000, 92749000, 92999000, 93124000, 93499000, 93624000, 93749000, 93999000, 94249000, 94374000, 94499000, 94749000, 94999000, 95249000, 95499000, 95624000, 95749000, 95999000, 96249000, 96374000, 96499000, 96749000, 96999000, 97249000, 97499000, 97624000, 97749000, 97999000, 98249000, 98499000, 98749000, 98874000, 98999000, 99249000, 99499000, 99749000, 99874000, 99999000, 100249000, 100499000, 100749000, 100874000, 100999000, 101249000, 101499000, 101624000, 101749000, 101999000, 102249000, 102374000, 102499000, 102749000, 102999000, 103249000, 103499000, 103624000, 103749000, 103999000, 104249000, 104374000, 104499000, 104749000, 104999000, 105249000, 105499000, 105624000, 105749000, 105999000, 106249000, 106374000, 106499000, 106749000, 106999000, 107249000, 107499000, 107624000, 107749000, 107999000, 108249000, 108499000, 108749000, 108874000, 108999000, 109249000, 109499000, 109624000, 109749000, 109999000, 110249000, 110374000, 110499000, 110749000, 110874000, 110999000, 111249000, 111499000, 111624000, 111749000, 111999000, 112249000, 112374000, 112499000, 112749000, 112874000, 112999000, 113249000, 113499000, 113624000, 113749000, 113999000, 169999000, 170499000, 170874000, 170999000, 171499000, 171874000, 171999000, 172499000, 172999000, 173374000, 173499000, 173874000, 173999000, 174499000, 174874000, 174999000, 175499000, 175874000, 175999000, 176499000, 176874000, 176999000, 177374000, 177499000, 177874000, 177999000, 178499000, 178874000, 178999000, 179499000, 179874000, 179999000, 180499000, 180999000, 181374000, 181499000, 181874000, 181999000, 182499000, 182874000, 182999000, 183499000, 183874000, 183999000, 184499000, 184874000, 184999000, 185374000, 185499000, 185874000, 185999000, 186499000, 186874000, 186999000, 187499000, 187874000, 187999000, 188499000, 188874000, 188999000, 189374000, 189499000, 189874000, 189999000, 190499000, 190874000, 190999000, 191499000, 191874000, 191999000, 192499000, 192874000, 192999000, 193374000, 193499000, 193874000, 193999000, 194499000, 194874000, 194999000, 195499000, 195874000, 195999000, 196499000, 196874000, 196999000, 197374000, 197499000, 197874000, 197999000, 198499000, 198874000, 198999000, 199499000, 199874000, 199999000};
int duration[369];

int checkUDP() {
  char packetBuffer[100];
  int cb = UDPTestServer.parsePacket();
  if (cb) {
    int len = UDPTestServer.read(packetBuffer, 100);
    packetBuffer[len] = 0;
    if (packetBuffer[0] == 'T') return 1;
    if (packetBuffer[0] == 'G') return 2;
  }
  return 0;
}

void forward(int motorpin, int power, int Time) {
  analogWrite(motorpin, power);
  delay(Time);
  analogWrite(motorpin, 0);
}

void setup() {
  pinMode(leftMotorForward, OUTPUT);
  pinMode(leftMotorReverse, OUTPUT);
  pinMode(rightMotorForward, OUTPUT);
  pinMode(rightMotorReverse, OUTPUT);
  Serial.begin(115200);
  WiFi.begin("TP-Link_05AF", "47543454");
  WiFi.config(IPAddress(192, 168, 1, 59), IPAddress(192, 168, 1, 1), IPAddress(255, 255, 255, 0));
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi connected");
  }

  UDPTestServer.begin(2808);  // 2808 arbitrary UDP port#


  for (int i = 0; i < 369; i++) {
    duration[i] = startNote[i + 1] - startNote[i];
  } 
}

void loop() {
  int msg = checkUDP();
  if (msg == 2 ) {
    Serial.println("Play");
    delayMicroseconds(startNote[0]);
    for (int i = 0; i < 370; i++) {
      if (i % 2) {
        forward(rightMotorForward, 255, 80);
        delayMicroseconds(duration[i] - 80000);
      } else {
        forward(leftMotorForward, 225, 70);
        delayMicroseconds(duration[i] - 70000);
      }
     }
   }
   else if (msg == 1){
    Serial.println("Test");
    delay(900);
    forward(rightMotorForward, 255, 100);
   }
}
